1. Start GDB with the executable:
Open a terminal and type gdb [executable_name] where [executable_name] is the name of your .exe file (e.g., gdb my_program.exe). 

2. Specify the executable (if not on the command line):
If you didn't specify the executable on the command line, you can use the file command inside GDB: (gdb) file [executable_name]. 
You can also use the exec-file command, which is essentially a combination of exec and symbol-file: (gdb) exec-file [executable_name]. 
If you need to debug a program that's being run from a script, you can use the exec command to replace the current process with the executable being debugged, according to Red Hat Developers. 

3. Start the program:
Once the executable is loaded, use the run command to start the program under GDB's control: (gdb) run. 
If your program requires command-line arguments, you can specify them with the run command: (gdb) run [arguments]. 

4. Set breakpoints:
To stop the program at a specific line of code, use the break command: (gdb) break [line_number], according to UMIACS. 
You can also set breakpoints on function names: (gdb) break [function_name]. 

5. Inspect the program's state:
Once the program stops at a breakpoint, you can examine variables and memory using commands like info, print, and x, according to UMIACS. 
You can also step through the code line by line using the step command or jump to the next instruction using the next command, according to UMIACS. 

6. Continue execution:
To continue the program's execution after examining its state, use the continue (or c) command: (gdb) continue. 

7. Quit GDB:
To exit GDB and return to the shell, use the quit command: (gdb) quit. 

EXAMINE MEMORY: x/FMT ADDRESS.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
t(binary), f(float), a(address), i(instruction), c(char), s(string)
and z(hex, zero padded on the left).

Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.  If a negative number is specified, memory is
examined backward from the address.

Defaults for format and size letters are those previously used.
Default count is 1.  Default address is following last thing printed
with this command or "print".

$ gdb ./DataTypes -q
(gdb) set disassembly-flavor intel
(gdb) break _start
Breakpoint 1 at 0x401000

(gdb) run
(gdb) disassemble
(gdb) info variables
All defined variables:
0x0000000000402000  hello_world
0x0000000000402022  var1
0x0000000000402024  var2
0x0000000000402026  var3
0x000000000040202a  var4
0x0000000000402032  repeat_buffer
0x00000000004020b2  __bss_start
0x00000000004020b2  _edata
0x00000000004020b4  buffer
0x00000000004020f8  _end
(gdb) 

(gdb) x/2xb &var1
0x402022:       0x11    0x22
(gdb) x/xh &var2
0x402024:       0x3344
(gdb) x/xw &var3
0x402026:       0xaabbccdd
(gdb) 
0x40202a:       0x11223344
(gdb) 
0x40202e:       0xaabbccdd
(gdb) 
0x402032:       0xaaaaaaaa
(gdb) x/xg &var4
0x40202a:       0xaabbccdd11223344
(gdb) x/128xb &repeat_buffer
0x402032:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa

(gdb) x/64xb &buffer
0x4020b4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020bc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020c4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020cc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020d4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020dc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020e4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020ec:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00

####################################################################################

ENDIANES:
$ nasm -felf64 Endian.nasm -o Endian.o
$ ld -o Endian Endian.o
(gdb) set disassembly-flavor intel
(gdb) break _start
Breakpoint 1 at 0x401000
(gdb) run
Starting program: /workspace/kernel/pentesteracadem/Endian 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, 0x0000000000401000 in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
=> 0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
   0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
   0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) info variables
All defined variables:

Non-debugging symbols:
0x0000000000402000  hello_world
0x0000000000402022  var1
0x000000000040202a  var2
0x0000000000402032  __bss_start
0x0000000000402032  _edata
0x0000000000402038  _end

(gdb) x/8xb &var1
0x402022:       0x11    0x22    0x33    0x44    0x55    0x66    0x77    0x88
(gdb) x/8h &var1
0x402022:       0x2211  0x4433  0x6655  0x8877  0x7788  0x5566  0x3344  0x1122
(gdb) x/xh &var1
0x402022:       0x2211
(gdb) x/xw &var1
0x402022:       0x44332211
(gdb) x/xg &var1
0x402022:       0x8877665544332211
(gdb) x/xg &var2
0x40202a:       0x1122334455667788
(gdb) disassemble
Dump of assembler code for function _start:
=> 0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
   0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
   0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) break *rip+27
No symbol table is loaded.  Use the "file" command.
(gdb) break *$rip+27
Breakpoint 2 at 0x40101b
(gdb) c
Continuing.
Hello World to the SLAE-64 Course

Breakpoint 2, 0x000000000040101b in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
   0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
=> 0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
   0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) info registers
rax            0x22                34
rbx            0x0                 0
rcx            0x40101b            4198427
rdx            0x22                34
rsi            0x402000            4202496
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fff01d7ab90      0x7fff01d7ab90
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x202               514
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0x40101b            0x40101b <_start+27>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) nexti
0x0000000000401023 in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
   0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
   0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
=> 0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) info registers
rax            0x8877665544332211  -8613303245920329199
rbx            0x0                 0
rcx            0x40101b            4198427
rdx            0x22                34
rsi            0x402000            4202496
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fff01d7ab90      0x7fff01d7ab90
r8             0x0                 0
r9             0


x0                 0
r10            0x0                 0
r11            0x202               514
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0x401023            0x401023 <_start+35>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) nexti
0x000000000040102b in _start ()
(gdb) info registers
rax            0x8877665544332211  -8613303245920329199
rbx            0x1122334455667788  1234605616436508552
rcx            0x40101b            4198427
rdx            0x22                34
rsi            0x402000            4202496
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fff01d7ab90      0x7fff01d7ab90
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x202               514
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0x40102b            0x40102b <_start+43>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) 
#######################################################################################
EXEMPLO USAR GDB TUI:

$ gdb -q ./HelloWorld -tui
(gdb)set disassembly-flavor intel
(gdb)break _start
(gdb)run
(gdb)layout asm
(gdb)layout regs
(gdb)stepi
ENTER,ENTER,ENTER till the end of app.


INTEL MANUALS:
https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html


COMPILAÇÃO PROFISSIONAL:
Oficial : https://www.gnu.org/software/make/manual/make.html

echo 		@echo "Ola Mundo! :)"  --> Uma exibição silenciosa, não exibe o comando
só exibe a saida

$ make -n --> para ver as variaveis que vão ser executadas, sem executar o programa

VER PROCESSOS NO COMPUTADOR:
$ ps ux
INTEL MANUALS:
https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html

$ gdb ./gdb_test 
(gdb) set disassembly-flavor intel
(gdb) disassemble main

PROGRAMMING ASSEMBLY:
http://nasm.us
OPÇÕES AT&T AND INTEL SINTAX

SYSCALL LINUX KERNEL TABLE , RESEARCH

INVOKING SYSTEM CALL WITH SYSCALL:
RAX - System Call Number
RDI - 1st Argument
RSI - 2nd Argument
RDX - 3rd Argument
R10 - 4th Argument
R8  - 5th Argument
R9  - 6th Argument

(gdb)ptype 0x2000000 ---> Informar o tipo do 


LIMPAR CONSOLE IN GDB = CTRL + L

$ file chall1
chall1: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped

gitpod /workspace/kernel/reverse (main) $ strings chall1
Congratz !
You failed, try again!
expl.asm
winMessage
lenWinMessage
failMessage
lenFailMessage
buffer
_loop
_print
_fail
_win
_exit
__bss_start
_edata
_end
.symtab
.strtab
.shstrtab
.text
.data
.bss
INSTALLING GEF COMPLEMENTO DO GDB

https://hugsy.github.io/gef/install/

$ bash -c "$(wget https://gef.blah.cat/sh -O -)"
Standalone
Quick install

The quickest way to get started with GEF is through the installation script available. Simply make sure you have GDB 10.0 or higher, compiled with Python 3.10 or higher, and run

bash -c "$(curl -fsSL https://gef.blah.cat/sh)"

Or if you prefer wget

bash -c "$(wget https://gef.blah.cat/sh -O -)"

Alternatively from inside gdb directly:

$ gdb -q
(gdb) pi import urllib.request as u, tempfile as t; g=t.NamedTemporaryFile(suffix='-gef.py'); open(g.name, 'wb+').write(u.urlopen('https://tinyurl.com/gef-main').read()); gdb.execute('source %s' % g.name)

That's it! GEF is installed and correctly set up. You can confirm it by checking the ~/.gdbinit file and see a line that sources (i.e. loads) GEF.

$ cat ~/.gdbinit
source ~/.gdbinit-gef.py

gef➤  info functions
All defined functions:

Non-debugging symbols:
0x08049000  _start
0x08049022  _loop
0x08049039  _print
0x08049050  _fail
0x08049061  _win
0x08049072  _exit

gef➤  disassemble _start
Dump of assembler code for function _start:
   0x08049000 <+0>:     mov    eax,0x3
   0x08049005 <+5>:     mov    ebx,0x0
   0x0804900a <+10>:    mov    ecx,0x804a024
   0x0804900f <+15>:    mov    edx,0x14
   0x08049014 <+20>:    int    0x80
   0x08049016 <+22>:    mov    edx,eax
   0x08049018 <+24>:    mov    ecx,0x0
   0x0804901d <+29>:    mov    ebx,0x0
End of assembler dump.

gef➤  break _start
Breakpoint 1 at 0x8049000

gef➤  info break
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08049000 <_start>

gef➤  info functions
All defined functions:

Non-debugging symbols:
0x08049000  _start
0x08049022  _loop
0x08049039  _print
0x08049050  _fail
0x08049061  _win
0x08049072  _exit

gef➤  disassemble _start
Dump of assembler code for function _start:
   0x08049000 <+0>:     mov    eax,0x3
   0x08049005 <+5>:     mov    ebx,0x0
   0x0804900a <+10>:    mov    ecx,0x804a024
   0x0804900f <+15>:    mov    edx,0x14
   0x08049014 <+20>:    int    0x80
   0x08049016 <+22>:    mov    edx,eax
   0x08049018 <+24>:    mov    ecx,0x0
   0x0804901d <+29>:    mov    ebx,0x0
End of assembler dump.

gef➤  break _start
Breakpoint 1 at 0x8049000

gef➤  info break
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08049000 <_start>

gef➤  break *0x08049016  -->definindo um endereo break point
Breakpoint 2 at 0x8049016


gef➤  info functions
All defined functions:

Non-debugging symbols:
0x08049000  _start
0x08049022  _loop
0x08049039  _print
0x08049050  _fail
0x08049061  _win
0x08049072  _exit

gef➤  disassemble _start
Dump of assembler code for function _start:
   0x08049000 <+0>:     mov    eax,0x3
   0x08049005 <+5>:     mov    ebx,0x0
   0x0804900a <+10>:    mov    ecx,0x804a024
   0x0804900f <+15>:    mov    edx,0x14
   0x08049014 <+20>:    int    0x80
   0x08049016 <+22>:    mov    edx,eax
   0x08049018 <+24>:    mov    ecx,0x0
   0x0804901d <+29>:    mov    ebx,0x0
End of assembler dump.

gef➤  break _start
Breakpoint 1 at 0x8049000

gef➤  info break
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08049000 <_start>

gef➤  break *0x08049016  -->definindo um endereo break point
Breakpoint 2 at 0x8049016

gef➤  i b  --.abreviação Information Break Point
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08049000 <_start>
2       breakpoint     keep y   0x08049016 <_start+22>

gef➤  del 2 -->deletar o segundo break point
gef➤  i b
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   0x08049000 <_start>

gef➤ si --> single step in


$eax   : 0x3       
$ebx   : 0x0       
$ecx   : 0x0804a024  →  <buffer+0000> add BYTE PTR [eax], al
$edx   : 0x0       
$esp   : 0xff8938c0  →  0x00000001
$ebp   : 0x0       
$esi   : 0x0       
$edi   : 0x0       
$eip   : 0x0804900f  →  <_start+000f> mov edx, 0x14
[ Legend: Modified register | Code | Heap | Stack | String ]

gef➤  x/s 0x804a024
0x804a024:	"ironbyte\n"

add ebx, eax; ebx = ebx +eax = 0 +0x69

scanf("%s", buff);
edx = lenght_of_the_buff
ebx = 0
eax = 0

for (int ecx = 0; ecx = 0; ecx < edx; ecx++){
      al = buff[ecx]
      ebx= ebx + eax
}
if (ebx >= 0x988)
   win();
else
   fail();

   Python 3.12.3 (main, Feb  4 2025, 14:48:35) [GCC 13.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> chr(0x69)
'i'
>>> chr(0x72)
'r'
>>> ord('z')
122
>>> 122*19
2318
>>> hex(122*19)
'0x90e'
>>> hex(122*20)
'0x988'
>>> 
>>> hex(122*20)
'0x988'
>>> 20*'z'
'zzzzzzzzzzzzzzzzzzzz'
>>> 



https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86-32_bit

https://www.youtube.com/watch?v=bhTGgzRsn1k


video from https://www.youtube.com/watch?v=8rncBCVySEw&t=1197s

Low Level programming language
Comunicate with microprocessor

INSTALANDO PROGRAMAS NECESSARIOS:
    $ sudo apt install nasm build-essential
    AGORA TEMOS NASM E LD INSTALADOS.
LINK CONSULTA:
https://shell-storm.org/
https://shell-storm.org/shellcode/files/shellcode-78.php

$ nasm -f elf64 demo.asm -o demo.o
$ ld demo.o -o demo
ld: warning: cannot find entry symbol _start; defaulting to 0000000000401000

$ sudo apt install net-tools --> para usar o comando netstat

$ netstat -nlt
tcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN     

sudo apt install netcat-traditional  --> para INSTALAR PACOTE NC - Network connect
$ nc localhost 4444

EXIBIR O ARQUIVO OBJEO EM CODIGO FONTE:
$ objdump -D -M intel demo.o

EXTRACTING CPU INFORMATION:
INTEL - ARM - MIPS
$ lscpu

$ cat /proc/cpuinfo
Important in the combo flags have the itens: mmx , lm

GDB YOUR BEST FRIEND:
$ gdb
(gdb) 

$ make test_gdb
$ pico test_gdb.c --> abre este editor
gitpod /workspace/kernel/pentesteracadem (main) $ gdb ./gdb_test
(gdb) run hello
(gdb) run PentesterAcademyPass

SOLUTION FROM GDB PROBLEM:
$ gdb -q gdb_test
(No debugging symbols found in gdb_test)
SOLUÇÃO RECOMPILAR NOVAMENTE COM SIMBOLOS GDB:
$ gcc -ggdb gdb_test.c -o gdb_test
APÓS FICA ASSIM:
Reading symbols from gdb_test...
(gdb) list --> exibe o codigo fonte
(gdb)

gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q gdb_test
Reading symbols from gdb_test...
(gdb) list
1       #include<stdio.h>
2       #include<string.h>
3
4       int main(int argc, char **argv)
5       {
6           char *p = "PentesterAcademyPass";
7
8           if (strcmp(argv[1], p) == 0)
9           {
10              printf("\nWelcome to the SLAE 64-bit course! Please proceed to the next video!\n");
(gdb) 
11          }
12          else
13          {
14              printf("\nTime to review those GDB videos again!\n");
15          }
16          return 0;
17      }
(gdb) break 8
Breakpoint 1 at 0x1187: file gdb_test.c, line 8.
(gdb) run hello
Starting program: /workspace/kernel/pentesteracadem/gdb_test hello
warning: Error disabling address space randomization: Operation not permitted
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7ffd23d81878) at gdb_test.c:8
8           if (strcmp(argv[1], p) == 0)
(gdb) print argv[1]
$1 = 0x7ffd23d82067 "hello"
(gdb) print p
$2 = 0x55ebd9fc5008 "PentesterAcademyPass"
(gdb) set variable p = argv[1]
(gdb) print p
$3 = 0x7ffd23d82067 "hello"
(gdb) c
Continuing.

Welcome to the SLAE 64-bit course! Please proceed to the next video!
[Inferior 1 (process 14885) exited normally]

Reading symbols from gdb_test...
(gdb) disassemble main

GENERAL PURPOSE REGISTER:
$ nasm -felf64 HelloWorld.nasm -o HelloWorld.o
$ ld HelloWorld.o -o HelloWorld 

REDUZE INSTRUCTION SIZE 
REMOVE NULLS
$ cp HelloWorld.nasm HelloWorld-small.nasm

$ objdump -M intel -d HelloWorld
 401000:       b8 01 00 00 00          mov    eax,0x1 

$ nasm -f elf64 HelloWorld-small.nasm -o HelloWorld-small.o
$ ld HelloWorld-small.o -o HelloWorld-small

$ objdump -M intel -d HelloWorld-small.o
 0:   b0 01                   mov    al,0x1

 SAFE MODE:
 $ cp HelloWorld.nasm HelloWorld-shellcodesafe.nasm
 MUDOU ISTO:
 _start:

	;print on screen
	xor rax,	rax
	mov al,		1

$ nasm -f elf64 HelloWorld-shellcodesafe.nasm -o HelloWorld-shellcodesafe.o
$ ld HelloWorld-shellcodesafe.o -o HelloWorld-shellcodesafe

$ objdump -M intel -d HelloWorld-shellcodesafe
0000000000401000 <_start>:
  401000:       48 31 c0                xor    rax,rax
  401003:       b0 01                   mov    al,0x1
 
 

SPCIAL TOKENS:
$ - Evaluates for current line
$$ - Evaluate for beginning of current section

$ nasm -f elf64 DataTypes.nasm -o DataTypes.o
$ ld DataTypes.o -o DataTypes


LEA (Load Efective address) load point value:
gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q ./MovingData-64 -tui

(gdb)set disassembly-flavor intel
(gdb)break _start
(gdb)run
(gdb)layout asm
(gdb)layout regs
(gdb)stepi
(gdb)info variables
(gdb)x/g &sample2
(gdb)x/xg &sample2
(gdb)stepi
(gdb)info variables
(gdb)x/4xb &sample
(gdb)x/4xb &sample

STACK:
Is a temporary location available in a program
Is a LIFO sempre é o primeiro candidato a ser removido

RSP-Register for Stack Pointer

PUSH Colocar dados no Stack
POP Retirar dados do Stack

(gdb)define hook-stop
>x/4xg $rsp
>end
(gdb)
stepi
x/8xb 0x402000 --> 8bytes
x/xg 0x402000  --> exibe valor completo
########################################################################################
Arithimetic Operations: using file Arithimetic-64.nasm

$ nasm -felf64 Arithimetic-64.nasm -o Arithimetic-64.o
$ ld Arithimetic-64.o -o Arithimetic-64

gdb -q ./Arithimetic-64 -tui
(gdb)set disassembly-flavor intel
(gdb)break _start
(gdb)run
(gdb)layout asm
(gdb)layout regs
(gdb)stepi
(gdb)info variables
#################################################################################
LOGICAL OPERATORS:
gdb -q ./Logical-64 -tui
(gdb)set disassembly-flavor intel
(gdb)break _start
(gdb)run
(gdb)layout asm
(gdb)layou regs

(gdb)stepi
(gdb)info variables
(gdb)x/xg &var1
(gdb)x/xg &var2
(gdb)stepi
(gdb)

(gdb) ptype 0x300000 --> VER O TIPO DA VARIAVEL